---
title: "Terrorism: Patterns, Actors, and Underlying Factors"
author: "Hengyi Xing, Section 04, hengyix; Sienna Wang, Section 01, SiennaWang12"
date: "2024-12-05"
format: 
  pdf:
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
         \usepackage[top=0.5in, bottom=0.5in, left=0.75in, right=0.75in]{geometry}
         \usepackage{ulem} % 添加这个包来支持下划线
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
execute:
  echo: true
  eval: false
  warning: false
---

```{python}
#| echo: false

import pandas as pd
import altair as alt
alt.renderers.enable("png")
import geopandas as gpd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer, ENGLISH_STOP_WORDS
```

Global instability and political polarization have been increasing, with terrorism affecting the globe. What factors contribute to the higher frequency and intensity of terrorist attacks in certain regions? This research analyzes the countries most affected by terrorism between 2000 and 2020, identifies the primary groups responsible, and explores their motives. The main dataset is from [Global Terrorism Database (GTD)](https://www.start.umd.edu/gtd/).

```{python}
#| echo: false

# Read in the GTD dataset
path = '/Users/hengyix/Documents/Github/DAP2-FINAL/data/'
file_gtd = 'globalterrorismdb.csv'
df_gtd = pd.read_csv(path+file_gtd)
```

```{python}
#| echo: false

# Select the useful datasets
gtd_clean = df_gtd[['iyear', 'country', 'country_txt', 'gname',
                 'attacktype1', 'attacktype1_txt', 'nkill', 'nwound', 'motive']]
# Focos on the 21st century
gtd_clean = gtd_clean[gtd_clean['iyear'] > 1999]
gtd_clean['nhurt'] = gtd_clean['nkill'] + gtd_clean['nwound']
```

## 1. Geographical Distribution
To analyze the geographical distribution of terrorist activities, we used two metrics: attack count and casualties. Attack count identifies hotspots, with total casualties adding depth beyond attack frequency.

We used GeoPandas to create interactive choropleth maps in a Shiny app, allowing users to select the desired metric and hover for countries and figures. A time slider was omitted due to the limited number of countries affected each year, making year-by-year maps less meaningful. Instead, users can explore year-specific data in an attached table, defining both year and sorting order. 
  
A drawback of the map is that due to several very high values, other areas appear lighter, making visual differences less noticeable. However, to highlight hotspots, we still chose to display original figures instead of processed results like logarithms.

```{python}
#| echo: false

# Data cleaning for the two maps
gtd_count = gtd_clean.groupby('country_txt').agg(
    attack_count=('country_txt', 'size'),
    casualties=('nhurt', 'sum')
).reset_index()
gtd_map = gtd_count.copy()

# Read in the shapefile
file_shape = (
    'world-administrative-boundaries/world-administrative-boundaries.shp')
world_shapefile = gpd.read_file(path+file_shape)
world_shapefile = world_shapefile[['name', 'geometry']]

# Match the countries with the shapefile
# Match the format according to the shapefile
gtd_map.loc[gtd_map['country_txt'] == 'Serbia', 'attack_count'] += 162
gtd_map.loc[gtd_map['country_txt'] == 'Serbia', 'attack_count'] += 11
gtd_map.loc[gtd_map['country_txt'] == 'Serbia', 'casualties'] += 279
gtd_map.loc[gtd_map['country_txt'] == 'Serbia', 'casualties'] += 8
gtd_map.loc[gtd_map['country_txt'] == 'Yugoslavia', 'attack_count'] += 106
gtd_map.loc[gtd_map['country_txt'] == 'Yugoslavia', 'casualties'] += 91

# Adjust country names in the shapefile to handle NAs manually
name_dict_map = {'Bosnia & Herzegovina': 'Bosnia-Herzegovina',
             'Brunei Darussalam': 'Brunei',
             'Timor-Leste': 'East Timor',
             'Iran (Islamic Republic of)': 'Iran',
             "Côte d'Ivoire": 'Ivory Coast',
             "Lao People's Democratic Republic": 'Laos',
             'Libyan Arab Jamahiriya': 'Libya',
             'The former Yugoslav Republic of Macedonia': 'Yugoslavia',
             'Moldova, Republic of': 'Moldova',
             'Congo': 'Republic of the Congo',
             'Russian Federation': 'Russia',
             'Slovakia': 'Slovak Republic',
             'Republic of Korea': 'South Korea',
             'Saint Lucia': 'St. Lucia',
             'Syrian Arab Republic': 'Syria',
             'United Republic of Tanzania': 'Tanzania',
             'U.K. of Great Britain and Northern Ireland': 'United Kingdom',
             'United States of America': 'United States',
             'West Bank': 'West Bank and Gaza Strip',
             }
world_shapefile['name'] = world_shapefile['name'].map(
    name_dict_map).fillna(world_shapefile['name'])

gtd_map = pd.merge(world_shapefile, gtd_map,
                   left_on='name', right_on='country_txt', how='left').fillna(0)
```

```{python}
#| echo: false
# First map countering attack frequency
fig, ax = plt.subplots(1, 1, figsize=(10, 5))
gtd_map.plot(column='attack_count', ax=ax, legend=True,
         legend_kwds={
             'label': "Attack Count by Country",
             'orientation': "vertical",
             'shrink': 0.5,      
             'aspect': 20,       
             'pad': 0.01,       
             'anchor': (0.2, 0.5)
         },
         cmap='Reds')  


ax.set_facecolor('lightblue')
ax.set_xticks([]) 
ax.set_yticks([]) 
plt.title('Global Attack Count Heatmap')
plt.savefig('pictures/global_attack_count_heatmap.png', dpi=300, bbox_inches='tight')

plt.close()
```

```{python}
#| echo: false
# Second map countering attack casualties
fig, ax = plt.subplots(1, 1, figsize=(10, 5))
gtd_map.plot(column='casualties', ax=ax, legend=True,
         legend_kwds={
             'label': "Casualty by Country",
             'orientation': "vertical",
             'shrink': 0.5,      
             'aspect': 20,       
             'pad': 0.01,       
             'anchor': (0.2, 0.5)
         },
         cmap='Reds')  


ax.set_facecolor('lightblue')
ax.set_xticks([]) 
ax.set_yticks([]) 
plt.title('Global Attack Casualty Heatmap')
plt.savefig('pictures/global_attack_casualties_heatmap.png', dpi=300, bbox_inches='tight')

plt.close()
```

| ![Map of Attack Count](pictures/Shiny_map_attack_count.png) | ![Map of Casualties](pictures/Shiny_map_casualties.png) |
|-------------------------------------|-------------------------------------|
\uline{Iraq and South Asia are the most affected regions in terms of both attack count and casualties, indicating severe impacts from terrorism.} Additionally, the United States, despite few attacks, shows a high casualty count due to significant events like 9/11.

These maps raise questions about factors contributing to higher attack counts in certain regions. Further research explores links to political systems (democracy levels) and economic development (GDP).
  
We obtained democracy level data from the [Polity V](https://www.systemicpeace.org/inscrdata.html), averaging scores from 2000-2018 (the latest data available is from 2018). After merging the data, we plotted the correlation between terrorist attacks and democracy scores. One issue we encountered is that over the 20-year period, a large number of countries experienced terrorist attacks, and the number of such incidents was relatively small. Thus, we focused on countries with over 1,000 events to avoid a cluttered chart.

```{python}
#| echo: false

file_democracy = 'p5v2018.csv'
df_democracy = pd.read_csv(path+file_democracy)
# Clean the dataset
df_democracy = df_democracy.loc[df_democracy['year'] > 1999, [
    'country', 'year', 'polity']]
df_democracy = df_democracy.loc[df_democracy['polity'] > -66, [
    'country', 'year', 'polity']] # -66, -77, -88, indicate not applicable
# Calculate the average democracy score for each country
country_score = df_democracy.groupby(
    'country')['polity'].mean().reset_index(name='avg_score')


# Moderate the country names in country_score to do the matching
# Erase NAs maually
name_dict_demo = {
    'Bosnia': 'Bosnia-Herzegovina',
    'Congo Kinshasa': 'Democratic Republic of the Congo',
    'Dominican Republic': 'Dominica',
    'Timor Leste': 'East Timor',
    'Myanmar (Burma)': 'Myanmar',
    'Congo-Brazzaville': 'Republic of the Congo',
    'Serbia and Montenegro': 'Serbia-Montenegro',
    'Korea South': 'South Korea'
}
country_score['country'] = country_score['country'].map(
    name_dict_demo).fillna(country_score['country'])
gtd_democracy = pd.merge(gtd_count, country_score, how='inner',
                     left_on='country_txt', right_on='country')
# Add HK count to China count
gtd_democracy.loc[gtd_democracy['country_txt'] == 'China', 'attack_count'] += 5
gtd_democracy = gtd_democracy[['country', 'attack_count', 'avg_score']]
```

```{python}
#| echo: false

# Filter the dataset to include only rows where attack counts exceed 1000
gtd_score = gtd_democracy.loc[gtd_democracy['attack_count'] > 1000]
# Scatter Plot
point = alt.Chart(gtd_score).mark_circle(size=60, color='steelblue').encode(
    alt.X('avg_score', title='Average Democracy Score (2000-2020)'),
    alt.Y('attack_count', title='Number of Attacks')
).properties(
    width=500,
    height=300,
    title='Number of Terrorist Attacks (2000 - 2020) vs. Democracy Performance'
)

# Fitted line (update the column name to 'log_attack_count')
line = point.transform_regression(
    'avg_score', 'attack_count', method='linear'
).mark_line(color='red')

combined_chart = point + line

final_chart = combined_chart.properties(
    width=500,
    height=210,
    title='Number of Terrorist Attacks vs. Democracy Performance (2000 - 2020)'
).configure_axis(
    grid=True
).configure_title(
    fontSize=12,
    anchor='start',
    color='black'
).configure_mark(
    opacity=0.6
)

final_chart.save("pictures/democracy.png", scale_factor=2)
```

For economic development, we used GDP data from the [World Bank database](https://databank.worldbank.org/indicator/NY.GDP.PCAP.CD/1ff4a498/Popular-Indicators#). We averaged GDP from 2000 to 2020 and merged it with terrorism data, ensuring compatibility by reconciling country names and addressing historical changes (e.g., Yugoslavia). The data was scaled logarithmically to illustrate patterns across countries with large GDP and attack count variations. One limitation is the equal allocation of attack counts from Yugoslavia and Serbia-Montenegro to present-day Serbia and Montenegro, potentially overlooking regional differences. Additionally, using a 20-year average GDP assumes stability over time, oversimplifying economic fluctuations that could affect the observed relationships.

```{python}
#| echo: false

# Import the GDP data
path = '/Users/hengyix/Documents/Github/DAP2-FINAL/data/'
file_name = "GDP.csv"
df_gdp = pd.read_csv(path + file_name)
df_gdp = df_gdp[df_gdp["Series Name"] == "GDP (current US$)"]

# Convert the GDP values to numeric type
gdp_columns = [col for col in df_gdp.columns if "YR" in col]
for col in gdp_columns:
    df_gdp[col] = pd.to_numeric(df_gdp[col], errors="coerce")

# Calculate the average GDP
df_gdp["average_gdp"] = df_gdp[gdp_columns].mean(axis=1)

# Calculate the amount of attack from GTD data
gtd_count = gtd_clean.groupby("country_txt").agg(
  attack_count = ("country_txt", "size")
).reset_index()
```

```{python}
#| echo: false

# Match the names
df_gdp["Country Name"] = df_gdp["Country Name"].replace({
  "Bahamas, The": "Bahamas",
  "Bosnia and Herzegovina": "Bosnia-Herzegovina",
  "Czechia": "Czech Republic",
  "Congo, Dem. Rep.": "Democratic Republic of the Congo",
  "Timor-Leste": "East Timor",
  "Egypt, Arab Rep.": "Egypt",
  "Gambia, The": "Gambia",
  "Hong Kong SAR, China": "Hong Kong",
  "Iran, Islamic Rep.": "Iran",
  "Cote d'Ivoire": "Ivory Coast",
  "Kyrgyz Republic": "Kyrgyzstan",
  "Lao PDR": "Laos",
  "North Macedonia": "Macedonia",
  "Congo, Rep.": "Republic of the Congo",
  "Russian Federation": "Russia",
  "Korea, Rep.": "South Korea",
  "Eswatini": "Swaziland",
  "Syrian Arab Republic": "Syria",
  "Turkiye": "Turkey",
  "Venezuela, RB": "Venezuela",
  "Viet Nam": "Vietnam",
  "West Bank and Gaza": "West Bank and Gaza Strip",
  "Yemen, Rep.": "Yemen"
  })

# Clean countries that no longer exists
gtd_count = gtd_count[gtd_count["country_txt"] != "International"]

# For Yugoslavia
serbia_montenegro_count = gtd_count.loc[gtd_count["country_txt"] == "Serbia-Montenegro", "attack_count"].values[0]
yugoslavia_count = gtd_count.loc[gtd_count["country_txt"] == "Yugoslavia", "attack_count"].values[0]

serbia_count = (serbia_montenegro_count / 2) + (yugoslavia_count / 2)
montenegro_count = (serbia_montenegro_count / 2) + (yugoslavia_count / 2)
gtd_count.loc[gtd_count["country_txt"] == "Serbia", "attack_count"] += serbia_count
gtd_count.loc[gtd_count["country_txt"] == "Montenegro", "attack_count"] += montenegro_count

gtd_count = gtd_count[gtd_count["country_txt"] != "Serbia-Montenegro"]
gtd_count = gtd_count[gtd_count["country_txt"] != "Yugoslavia"]

# For Taiwan
taiwan_count = gtd_count.loc[gtd_count["country_txt"] == "Taiwan", "attack_count"].values[0]
gtd_count.loc[gtd_count["country_txt"] == "China", "attack_count"] += taiwan_count
gtd_count = gtd_count[gtd_count["country_txt"] != "Taiwan"]

# Merge the dataframes
gtd_gdp = gtd_count.merge(df_gdp[["Country Name", "average_gdp"]], left_on="country_txt", right_on="Country Name", how="left")
```

```{python}
#| echo: false

# Use log to scale the data
gtd_gdp["log_average_gdp"] = np.log(gtd_gdp["average_gdp"])
gtd_gdp["log_attack_count"] = np.log(gtd_gdp["attack_count"])

# Make the plot
scatter_plot = alt.Chart(gtd_gdp).mark_circle(size=60, opacity=0.6, color="steelblue").encode(
    alt.X("log_average_gdp", title="Log Average GDP ($, 2000-2020)", scale=alt.Scale(zero=False)),
    alt.Y("log_attack_count", title="Log Number of Attacks", scale=alt.Scale(zero=True))
).properties(
    width=500,
    height=200,
    title=alt.TitleParams(
        text="Number of Terrorist Attacks vs Average GDP (2000 - 2020)",
        fontSize=12,
        anchor="start",
        color="black"
    )
)

# Add the fitted line
trend_line = scatter_plot.transform_regression("log_average_gdp", "log_attack_count").mark_line(color="red")

economy_chart = scatter_plot + trend_line
economy_chart.save("pictures/economy.png", scale_factor=2)
```
| ![Democracy Chart](pictures/democracy.png) | ![Economy Chart](pictures/economy.png) |
|-------------------------------------|-------------------------------------|
The negative relationship between democracy and terrorist attacks implies that authoritarian countries may be more vulnerable to terrorism. \uline{Policymakers should focus on strengthening political stability and addressing grievances in authoritarian regions to reduce the likelihood of terrorism.} The positive trend between GDP and terrorist attacks suggests that wealthier countries may be attractive targets for terrorism. \uline{This could imply that economically prosperous countries need to enhance their domestic security and counterterrorism strategies.}
  
However, these charts show correlations, not causations. The observed relationships do not imply that lower democracy or higher GDP causes more terrorist attacks. Numerous confounding factors, such as historical conflicts and regional influences, could affect GDP, democracy, and terrorism rates.

## 2. Most Active Groups
Based on the previous maps, we categorized terrorist activities by region and identified most active groups based on the number of attacks, providing insight into regional terrorism dynamics.
  
We calculated the number of attacks attributed to different groups and their proportion in each region, visualizing the top 10 groups per region using a dynamic bar chart in the Shiny app. It allows users to select different regions and view detailed information by hovering over the bars.

One challenge was that many group names are too long to display in the chart. To address this, we truncated and rotated labels while ensuring the full names are visible in tooltips for clarity. For truncated names resulting in identical labels, we appended unique identifiers, such as "(1)" or "(2)", to distinguish them effectively. This approach maintains readability while preserving access to full group information.

```{python}
#| echo: false

# Categorize countries into three regions
SA = ['Afghanistan', 'Bangladesh', 'Bhutan', 'India', 'Pakistan', 
      'Maldives', 'Nepal', 'Sri Lanka']

gtd_clean['region'] = gtd_clean['country_txt'].apply(
    lambda x: 'Iraq' if x == 'Iraq' else 
              'South Asia' if x in SA else 
              'Other Regions'
)
# Group by gname and keep the top 10 according to proportion
gtd_gnames = gtd_clean[['region', 'gname']]
gtd_gnames = gtd_gnames.groupby(['region', 'gname']).size().reset_index(name='count')
gtd_gnames['Percentage'] = gtd_gnames.groupby('region')['count'].transform(lambda x: x / x.sum())
gtd_gnames.sort_values(by=['region', 'Percentage'], ascending=[True, False], inplace=True)
gtd_gnames = gtd_gnames.groupby('region').head(10)

regions = ['South Asia', 'Iraq', 'Other Regions']
# Active group plot for each of the three regions
for region in regions:
    data_filtered = gtd_gnames[gtd_gnames['region'] == region]
    chart = alt.Chart(data_filtered).mark_bar().encode(
        x=alt.X(
            'gname:N',
            sort='-y',
            title='Group Names',
            axis=alt.Axis(labelExpr="slice(datum.value, 0, 20)", labelAngle=-45)
        ),
        y=alt.Y('Percentage:Q', title='Proportion'),
        color=alt.Color('gname:N', legend=None, scale=alt.Scale(domain=data_filtered['gname'].unique()))
    ).properties(
        title=f"Groups Responsible for Most Attacks in {region}",
        width=500,
        height=300
    )
    chart.save(f"pictures/attacks_{region.replace(' ', '_').lower()}.png", scale_factor=2)
```
| ![Attacks in Iraq](pictures/Shiny_Iraq.png) | ![Attacks in South Asia](pictures/Shiny_South_Asia.png) | ![Attacks in Other Regions](pictures/Shiny_Other_Regions.png) |
|-----------------------------------------------|-----------------------------------------------|-----------------------------------------------|
\uline{Most terrorist incidents are attributed to unknown entities, and no single identified group is active globally. This aligns with the secretive nature of terrorism, complicating efforts to combat it. However, when focusing on Iraq and South Asia, ISIL and the Taliban stand out respectively.}

## 3. The Primary Motivations for Attacks (NLP)

We explored the motivations behind the Taliban and ISIL using TF-IDF to identify key distinguishing words from the `motive` field. This approach captures the relative importance of words within each group compared to the entire dataset, crucial given the repetitive nature of the descriptions.
  
We began by filtering incidents linked to each group and pre-process the motive texts by removing stop words and irrelevant terms. TF-IDF was then applied to extract the most relevant keywords, visualized through bar charts.  
  
However, TF-IDF may assign low scores to repetitive phrases, diluting the overall results and causing genuinely distinctive words to be overshadowed or omitted. Additionally, incomplete or missing data complicates efforts to capture a comprehensive representation of motives, potentially skewing the insights.

```{python}
#| echo: false

# For Taliban
df_gtd_Taliban = gtd_clean[gtd_clean["gname"] == "Taliban"]
motive_texts_Taliban = df_gtd_Taliban["motive"].dropna().tolist()

# Add some meaningless words to the stop words list
custom_stop_words = list(ENGLISH_STOP_WORDS.union({
    "motive", "specific", "attack", "sources", "stated", 
    "claimed", "responsibility", "noted", "carried","unknown", "taliban", "incident", "information", "targeted", "victims", "accused", "victim", "posited", "suspected", "group", "believed"
}))

vectorizer = TfidfVectorizer(stop_words=custom_stop_words, min_df=3)
tfidf_matrix = vectorizer.fit_transform(motive_texts_Taliban)

# Get the key words and corresponding weights
feature_names = vectorizer.get_feature_names_out()
tfidf_scores = tfidf_matrix.sum(axis=0).A1

# Transfer to dataframe
tfidf_df = pd.DataFrame({"Word": feature_names, "Score": tfidf_scores})
tfidf_df = tfidf_df.sort_values(by="Score", ascending=False).head(10)

# Make the plot
motive_taliban = alt.Chart(tfidf_df).mark_bar(color="steelblue").encode(
    alt.X("Word", sort="-y", title="Keywords", axis=alt.Axis(labelAngle=-40)),
    alt.Y("Score", title="TF-IDF Score")
).properties(
    title="Top 10 Keywords of Taliban's Motive",
    width=500,
    height=150
).configure_title(
    fontSize=16,
    anchor="middle"
).configure_axis(
    labelFontSize=12,
    titleFontSize=14
).configure_view(
    fill='#fdfaf4'  # Set background color to light cream
)

motive_taliban.save("pictures/motive_taliban.png", scale_factor=2)
```

```{python}
#| echo: false

# For ISIL
df_gtd_ISIL = gtd_clean[gtd_clean["gname"] == "Islamic State of Iraq and the Levant (ISIL)"]
motive_texts_ISIL = df_gtd_ISIL["motive"].dropna().tolist()

# Add some meaningless words to the stop words list
custom_stop_words = list(ENGLISH_STOP_WORDS.union({
    "motive", "specific", "attack", "sources", "stated", 
    "claimed", "responsibility", "noted", "carried","unknown", "isil", "incident", "information", "targeted", "victims", "accused", "victim", "posited", "suspected", "group", "believed", "area"
}))

vectorizer = TfidfVectorizer(stop_words=custom_stop_words, min_df=3)
tfidf_matrix = vectorizer.fit_transform(motive_texts_ISIL)

# Get the key words and corresponding weights
feature_names = vectorizer.get_feature_names_out()
tfidf_scores = tfidf_matrix.sum(axis=0).A1

# Transfer to dataframe
tfidf_df = pd.DataFrame({"Word": feature_names, "Score": tfidf_scores})
tfidf_df = tfidf_df.sort_values(by="Score", ascending=False).head(10)

# Make the plot
motive_ISIL = alt.Chart(tfidf_df).mark_bar(color="steelblue").encode(
    alt.X("Word", sort="-y", title="Keywords", axis=alt.Axis(labelAngle=-40)),
    alt.Y("Score", title="TF-IDF Score")
).properties(
    title="Top 10 Keywords of ISIL's Motive",
    width=500,
    height=150
).configure_title(
    fontSize=16,
    anchor="middle"
).configure_axis(
    labelFontSize=12,
    titleFontSize=14
).configure_view(
    fill='#fdfaf4'  # Set background color to light cream
)

motive_ISIL.save("pictures/motive_ISIL.png", scale_factor=2)
```

| ![Taliban Chart](pictures/motive_taliban.png) | ![ISIL Chart](pictures/motive_ISIL.png) |
|-------------------------------------|-------------------------------------|  
In analyzing the motives of the Taliban, keywords like "government," "Afghan," and "elections" suggest their focus on undermining the Afghan government and disrupting elections, aligning with their goal of weakening political stability. ISIL's motives are reflected in keywords like "Iraq," "Islamic," and "Levant," highlighting their regional focus and aspirations for an Islamic governance structure. Terms like "Sunni" indicate their use of sectarian divisions to extend influence and consolidate control.
  
\uline{This suggests that, for the Taliban, the focus should be on safeguarding government institutions and stabilizing electoral processes to counteract their efforts to disrupt governance. Regarding ISIL, there could be a need for policies that reduce inter-religious tensions and strengthen regional cooperation to contain their influence.}

## 4. Directions for Future Work
Future research could delve into nuanced relationships involving regional conflicts and motives, aiming to understand how historical, cultural, and socio-political factors interact to drive terrorism in specific areas. Also,  incorporating dynamic, year-on-year changes in GDP, democracy scores, and terror attack frequencies would allow for a more comprehensive understanding of how economic and political fluctuations influence terrorism over time. This approach could reveal patterns of vulnerability linked to economic instability or shifts in governance quality, providing a clearer picture of causality rather than simple correlation.

Moreover, a deeper analysis into the psychology behind group motivations could shed light on the individual and collective drivers of radicalization, including ideological, emotional, and social factors. Understanding the psychological mechanisms that sustain terrorist recruitment and commitment could inform more effective prevention and deradicalization strategies, focusing not just on structural factors but also on the cognitive and emotional dimensions that underpin extremist behavior.