---
title: "Final Project"
author: "Sienna Wang, Hengyi Xing"
date: "2024-11-03"
format: 
  pdf:
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
output:
  echo: false
  eval: false
---

```{python}
import pandas as pd
import altair as alt
alt.renderers.enable("png")
import geopandas as gpd
import matplotlib.pyplot as plt
```

```{python}
# Read in the GTD dataset
path = '/Users/hengyix/Documents/GitHub/DAP2-FINAL/data/'
file_gtd = 'globalterrorismdb.csv'
df_gtd = pd.read_csv(path+file_gtd)
```

```{python}
gtd_clean = df_gtd[['iyear', 'country', 'country_txt', 'gname',
                 'attacktype1', 'attacktype1_txt', 'nkill', 'nwound', 'motive']]
# Focos on the 21st century
gtd_clean = gtd_clean[gtd_clean['iyear'] > 1999]
gtd_clean['nhurt'] = gtd_clean['nkill'] + gtd_clean['nwound']
```

```{python}
# Data cleaning for the two maps
gtd_count = gtd_clean.groupby('country_txt').agg(
    attack_count=('country_txt', 'size'),
    casualties=('nhurt', 'sum')
).reset_index()
gtd_map = gtd_count.copy()

# Read in the shapefile
file_shape = (
    'world-administrative-boundaries/world-administrative-boundaries.shp')
world_shapefile = gpd.read_file(path+file_shape)
world_shapefile = world_shapefile[['name', 'geometry']]

# Match the countries with the shapefile
# Match the format according to the shapefile
gtd_map.loc[gtd_map['country_txt'] == 'Serbia', 'attack_count'] += 162
gtd_map.loc[gtd_map['country_txt'] == 'Serbia', 'attack_count'] += 11
gtd_map.loc[gtd_map['country_txt'] == 'Serbia', 'casualties'] += 279
gtd_map.loc[gtd_map['country_txt'] == 'Serbia', 'casualties'] += 8
gtd_map.loc[gtd_map['country_txt'] == 'Yugoslavia', 'attack_count'] += 106
gtd_map.loc[gtd_map['country_txt'] == 'Yugoslavia', 'casualties'] += 91

# Adjust country names in the shapefile to handle NAs manually
name_dict_map = {'Bosnia & Herzegovina': 'Bosnia-Herzegovina',
             'Brunei Darussalam': 'Brunei',
             'Timor-Leste': 'East Timor',
             'Iran (Islamic Republic of)': 'Iran',
             "CÃ´te d'Ivoire": 'Ivory Coast',
             "Lao People's Democratic Republic": 'Laos',
             'Libyan Arab Jamahiriya': 'Libya',
             'The former Yugoslav Republic of Macedonia': 'Yugoslavia',
             'Moldova, Republic of': 'Moldova',
             'Congo': 'Republic of the Congo',
             'Russian Federation': 'Russia',
             'Slovakia': 'Slovak Republic',
             'Republic of Korea': 'South Korea',
             'Saint Lucia': 'St. Lucia',
             'Syrian Arab Republic': 'Syria',
             'United Republic of Tanzania': 'Tanzania',
             'U.K. of Great Britain and Northern Ireland': 'United Kingdom',
             'United States of America': 'United States',
             'West Bank': 'West Bank and Gaza Strip',
             }
world_shapefile['name'] = world_shapefile['name'].map(
    name_dict_map).fillna(world_shapefile['name'])

gtd_map = pd.merge(world_shapefile, gtd_map,
                   left_on='name', right_on='country_txt', how='left').fillna(0)
```

```{python}
fig, ax = plt.subplots(1, 1, figsize=(10, 5))
gtd_map.plot(column='attack_count', ax=ax, legend=True,
         legend_kwds={
             'label': "Attack Count by Country",
             'orientation': "vertical",
             'shrink': 0.5,      
             'aspect': 20,       
             'pad': 0.01,       
             'anchor': (0.2, 0.5)
         },
         cmap='Reds')  


ax.set_facecolor('lightblue')
ax.set_xticks([]) 
ax.set_yticks([]) 
plt.title('Global Attack Count Heatmap')
plt.show()
```

```{python}
fig, ax = plt.subplots(1, 1, figsize=(10, 5))
gtd_map.plot(column='casualties', ax=ax, legend=True,
         legend_kwds={
             'label': "Casualty by Country",
             'orientation': "vertical",
             'shrink': 0.5,      
             'aspect': 20,       
             'pad': 0.01,       
             'anchor': (0.2, 0.5)
         },
         cmap='Reds')  


ax.set_facecolor('lightblue')
ax.set_xticks([]) 
ax.set_yticks([]) 
plt.title('Global Attack Casualty Heatmap')
plt.show()
```

```{python}
file_democracy = 'p5v2018.csv'
df_democracy = pd.read_csv(path+file_democracy)
# Clean the dataset
df_democracy = df_democracy.loc[df_democracy['year'] > 1999, [
    'country', 'year', 'polity']]
# Calculate the average democracy score for each country
country_score = df_democracy.groupby(
    'country')['polity'].mean().reset_index(name='avg_score')


# Moderate the country names in country_score to do the matching
# Erase NAs maually
name_dict_demo = {
    'Bosnia': 'Bosnia-Herzegovina',
    'Congo Kinshasa': 'Democratic Republic of the Congo',
    'Dominican Republic': 'Dominica',
    'Timor Leste': 'East Timor',
    'Myanmar (Burma)': 'Myanmar',
    'Congo-Brazzaville': 'Republic of the Congo',
    'Serbia and Montenegro': 'Serbia-Montenegro',
    'Korea South': 'South Korea'
}
country_score['country'] = country_score['country'].map(
    name_dict_demo).fillna(country_score['country'])
gtd_score = pd.merge(gtd_count, country_score, how='inner',
                     left_on='country_txt', right_on='country')
# Add HK count to China count
gtd_score.loc[gtd_score['country_txt'] == 'China', 'attack_count'] += 5
```

## Draw the plot fot democracy
```{python}
# Filter the dataset to include only rows where attack counts exceed 1000
gtd_score = gtd_score.loc[gtd_score['attack_count'] > 1000]
point = alt.Chart(gtd_score).mark_circle(size=60, color='steelblue').encode(
    alt.X('avg_score', title='Average Democracy Score (2000-2020)'),
    alt.Y('attack_count', title='Number of Attacks')
).properties(
    width=500,
    height=300,
    title='Number of Terrorist Attacks (2000 - 2020) vs. Democracy Performance'
)
line = point.transform_regression(
    'avg_score', 'attack_count', method='linear'
).mark_line(color='red') 

combined_chart = point + line

final_chart = combined_chart.properties(
    width=500,
    height=300,
    title='Number of Terrorist Attacks vs. Democracy Performance (2000 - 2020)'
).configure_axis(
    grid=True
).configure_title(
    fontSize=12,
    anchor='start',
    color='black'
).configure_mark(
    opacity=0.6
)


final_chart
```